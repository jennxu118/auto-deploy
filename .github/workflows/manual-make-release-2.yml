name: Manual-Make-Release-2
on:
  push:
    branches:
      - release/*
      - hotfix/*
  workflow_dispatch:
    inputs:
      release-version:
        description: Semantic version -M (majo) -m (minor) -p (patch) -h (hotfix patch)
        required: true
        default: '-p'

jobs:
  make-release-hotfix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        dev-branch:
          - develop
        prod-branch:
          - main

    steps:
      - uses: actions/checkout@v2

      - name: get-ref
        run: |
          echo ${{ github.ref }}

      - name: Get new release branch name
        if: ${{ (contains(github.event_name, 'workflow_dispatch')) || false }}
        shell: bash
        run: |
          chmod +x ./.github/scripts/new-release-version.sh
          echo "NEW_BRANCH_NAME=$(./.github/scripts/new-release-version.sh ${{ github.event.inputs.release-version }})" >> $GITHUB_ENV
#          echo "::set-output name=NEW_BRANCH_NAME::$(./.github/scripts/new-release-version.sh ${{ github.event.inputs.release-version }})" >> $GITHUB_ENV
#          NEW_BRANCH_NAME="$(./.github/scripts/new-release-version.sh ${{ github.event.inputs.release-version }})"
#           echo "$NEW_BRANCH_NAME" >> $GITHUB_ENV
        id: new-branch-name

      - name: create branch
        if: ${{ (contains(github.event_name, 'workflow_dispatch')) || false }}
        run: |
          git config user.name ${{ github.actor }}
          git config user.email noreply@github.com
          git checkout -b ${{ env.NEW_BRANCH_NAME }}
          git commit -a -m "new ${{ env.NEW_BRANCH_NAME  }} branch created."
          git push --set-upstream origin ${{ env.NEW_BRANCH_NAME }}
#   steps.new-branch-name.outputs.NEW_BRANCH_NAME
      - name: Get current Branch
        if: ${{ (contains(github.event_name, 'push')) }}
        run: |
          echo "NEW_BRANCH_NAME=${{github.ref_name}}" >> $GITHUB_ENV
#          echo "::set-output name=NEW_BRANCH_NAME::${{github.ref_name}}"
        id: current-branch-name

      - name: Create pull request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr list -S title:"${{ env.NEW_BRANCH_NAME }} into ${{ matrix.prod-branch }}" base:${{ matrix.prod-branch }} head:${{ env.NEW_BRANCH_NAME }}
          PR_EXISTS=$(gh pr list -S "is:open title:${{ env.NEW_BRANCH_NAME }} into ${{ matrix.prod-branch }} base:${{ matrix.prod-branch }} head:${{ env.NEW_BRANCH_NAME }}")
          [[ "${PR_EXISTS}" != "" ]] && echo "Exists" || gh pr create --title "${{ env.NEW_BRANCH_NAME }} into ${{ matrix.prod-branch }}" --base ${{ matrix.prod-branch }} --head ${{ env.NEW_BRANCH_NAME }} --reviewer ${{ github.actor }} --draft --body "Hi;"


      - name: Set new branch name
        id: set-new-branch-name
        run: |
          echo ${{ github.ref }}
          echo ${{ env.NEW_BRANCH_NAME }}
          echo "::set-output name=NEW_BRANCH_NAME::${{ env.NEW_BRANCH_NAME }}"
#          echo "::set-output name=REF::${{ github.ref }}"
    outputs:
      NEW_BRANCH_NAME: ${{ steps.set-new-branch-name.outputs.NEW_BRANCH_NAME }}
#      REF: ${{ steps.set-new-branch-name.outputs.REF }}

#  create-pull-request:
#    needs: [ make-release-hotfix ]
#    uses: jennxu118/auto-deploy/.github/workflows/pull-request.yml@develop
#    with:
#      event_name: ${{ github.event_name }}
#      ref: ${{ github.ref }}
#      new_branch_name: ${{ needs.make-release-hotfix.outputs.NEW_BRANCH_NAME }}
#      dev_branch_name: "develop"
#      prod_branch_name: "main"
#      user_name: ${{ github.actor }}

#    secrets:
#      GITHUB_TOKEN: ${{ secretes.GITHUB_TOKEN }}


  # only trigger by manual create release branch and new commit to release branch
#  deploy-dev:
#    if:  ${{ !(contains(github.ref, 'refs/heads/hotfix')) || false }}
#    needs: [ make-release-hotfix ]
#    uses: jennxu118/auto-deploy/.github/workflows/deploy.yml@develop
#    with:
#      environment: Dev
#      user_name: $github.actor

#        run: |
#          gh pr create --title "${{ inputs.new_branch_name }} into ${{ inputs.prod_branch_name }}" --base "${{ inputs.prod_branch_name }}" --head ${{ inputs.new_branch_name }} --reviewer ${{ inputs.user_name }} --draft  --body ${{ inputs.pull_request_body }}
#          gh pr create --title "${{ steps.new-branch-name.outputs.NEW_BRANCH_NAME }} into ${{ matrix.prod-branch }}" --base ${{ matrix.prod-branch }} --head ${{ steps.new-branch-name.outputs.NEW_BRANCH_NAME }} --reviewer "${{ github.actor }}" --draft --body "Hi!\nThis PR was created by Github workflow."
